heat_template_version: 2014-10-16
#
# you can deploy this template using the following command:
# 'openstack stack create -t example.yaml --parameter key_name=<publicKeyName> <stackName>'
# 
# or you can just paste it into the web-ui under "orchestration" >> "launch stack"
#
# after successful stack creation you can login with 
# ssh -l syseleven <externalIP> 
# 

description: Simple template to deploy an external concourse worker

parameters:
  tsa_host:
    type: string
    description: The endpoint of your web node
  tsa_public_key:
    type: string
    description: The public key of your web node
  worker_private_key:
    type: string
    description: The private key of your worker
  key_name:
    type: string
    constraints:
      - custom_constraint: nova.keypair
  public_network:
    type: string
    default: floating
  flavor:
    type: string
    description: VM flavor
    default: m1.large
  image:
    type: string
    default: openSUSE-Leap-15.1-OpenStack
    constraints:
      - custom_constraint: glance.image


resources:
  allow_ssh:
    type: OS::Neutron::SecurityGroup
    properties:
      description: allow incoming SSH and ICMP traffic from anywhere.
      name: allow incoming traffic, tcp port 22 and icmp
      rules: 
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, port_range_min: 22, port_range_max: 22, protocol: tcp } 
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, protocol: icmp } 

  allow_webtraffic:
    type: OS::Neutron::SecurityGroup
    properties:
      description: allow incoming web traffic via http from anywhere. 
      name: allow incoming traffic, tcp port 80
      rules: 
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, port_range_min: 80, port_range_max: 80, protocol: tcp } 

  concourse_worker:
    type: OS::Nova::Server
    properties:
      name: concourse_worker
      user_data_format: RAW
      user_data: { get_resource: cloud-init-config }    
      image: { get_param: image }
      key_name: { get_param: key_name }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: port }

  cloud-init-config:
   # cloud init resource
   type: OS::Heat::CloudConfig
   properties:
     cloud_config:
       manage_etc_hosts: true
       users:
           - name: concourse
             gecos: concourse Stack user
             sudo: ALL=(ALL) NOPASSWD:ALL
             shell: /bin/bash
       write_files:
         - content: |
             $worker_private_key
           path: /tmp/worker_key
           permissions: 0600
         - content: |
             $tsa_public_key
           path: /tmp/web.pub
           permissions: 0744
         - content: |
             #!/usr/bin/env bash
             # start the concourse worker
             docker run \
               -v /tmp/worker:/keys/worker \
               -v /tmp/web.pub:/keys/web.pub \
               -e CONCOURSE_TSA_HOST=$tsa_host:2222 \
               -e CONCOURSE_TSA_PUBLIC_KEY="/keys/web.pub" \
               -e CONCOURSE_TSA_WORKER_PRIVATE_KEY="/keys/worker" \
               --privileged  \
               --rm concourse/concourse worker
           path: /root/start_concourse_worker.sh
           permissions: 0700
       runcmd:
         - /root/start_concourse_worker.sh
       packages:
         - docker

  port:
    type: OS::Neutron::Port
    depends_on: [ net, allow_ssh, allow_webtraffic ]
    properties:
      network: { get_resource: net }
      security_groups: [ get_resource: allow_ssh, get_resource: allow_webtraffic ]

  net:
    type: OS::Neutron::Net
    properties: 
      name: concourse-net

  subnet:
    type: OS::Neutron::Subnet
    depends_on: [ net ]
    properties:
      name: concourse-subnet
      dns_nameservers:
        - 8.8.8.8
        - 8.8.4.4
      network: { get_resource: net }
      ip_version: 4
      cidr: 10.0.0.0/24
      allocation_pools:
      - {start: 10.0.0.10, end: 10.0.0.250}

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: {"network": { get_param: public_network }}
      name: concourse-router

  router_subnet_bridge:
    type: OS::Neutron::RouterInterface
    depends_on: [ router, subnet ]
    properties:
      router: { get_resource: router }
      subnet: { get_resource: subnet }

  floating_ip:
    type: OS::Neutron::FloatingIP
    depends_on: [ port ]
    properties:
      floating_network: { get_param: public_network }
      port_id: { get_resource: port }
